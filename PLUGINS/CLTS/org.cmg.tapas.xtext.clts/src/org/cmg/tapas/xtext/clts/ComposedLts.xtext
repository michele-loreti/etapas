grammar org.cmg.tapas.xtext.clts.ComposedLts with org.eclipse.xtext.common.Terminals

generate composedLts "http://www.cmg.org/tapas/xtext/clts/ComposedLts"

Model: {Model}
 'model' name=ID ';'
 ( elements += Element )*
 ;

Element:
	Action | Lts | Formula | Label
// | State  
;

Lts:
 'lts' name = ID body=LtsBody 
;

LtsBody:
	LtsDeclarationBody | LtsComposition 
;

LtsComposition:
	'=' body = CompositionBody ';'//left=[Lts] op=LtsOperator right=[Lts] (re = Renaming)? 
;

CompositionBody:
	Interleaving
;

Interleaving returns CompositionBody:
	Synchronization ({Interleaving.left = current} '||' right = Interleaving)?
;

Synchronization returns CompositionBody:
	ControlledInteraction ({Synchronization.left = current} '|*|' right = Synchronization)?
;

ControlledInteraction returns CompositionBody:
	Renaming ({ControlledInteraction.left = current} '|' (action += [Action] (',' action += [Action])*) '|' right = ControlledInteraction)?	
;

Renaming returns CompositionBody:
	BaseLts ({Renaming.arg = current} '{' maps += Mapping (',' maps += Mapping )* '}')?
;

BaseLts returns CompositionBody:
	Reference | '(' CompositionBody ')'
;

Reference:
	lts = [Lts]
;

Mapping:
	src=[Action] '->' trg=[Action]
;
//LtsOperator:
// {LtsSynchronization} '|*|' 
// | {LtsInterleaving} '||'
// | {LtsComposition} '|' (action += [Action] (',' action += [Action])*) '|'
//;



LtsDeclarationBody:
 '{'
  'states' ':' states += LtsState (',' states += LtsState )* ';'
  'init' ':' init += [LtsState] (',' init += [LtsState] )*  ';'  
  ('rules' ':' (rules += LtsRule)*	'endrules')? 
  ('labels' ':' (labels += LabelRule)* 'endlabels')?
 '}' 
;

LtsRule:
 src=[LtsState] '-' act=[Action] '->' trg=[LtsState] ';'
;

LtsState:
 name = ID
;

LabelRule:
 label = [Label] ':' ( states += [LtsState] (',' states+=[LtsState])*) ';' 
;

State:
 (isInitial ?= 'init')? 'state' name = ID '{'
  ( rules += Rule ';')*
 '}' 
;

Rule:
 action=[Action] '->' next=[State] 
;

Label:
	'label' name = ID ';'
;

Action:
 'action' name = ID ';'
;

Formula:
 LtlFormulaDeclaration | HmlFormulaDeclaration | RegularSafety
;

RegularSafety:
	'regular' name= ID '=' exp=BadPrefix ';'
;

BadPrefix:
	ChoiceRExpression
;

ChoiceRExpression returns BadPrefix:
	SequeceRExpression ({ChoiceRExpression.left=current} '+' right=SequeceRExpression)*
;

SequeceRExpression returns BadPrefix:
	StarRExpression ({SequeceRExpression.left= current} right=StarRExpression)*
;

StarRExpression returns BadPrefix:
	BasicRExpression ({StarRExpression.expression=current} '*')?
;

BasicRExpression returns BadPrefix:
	  '[' BooleanPredicate ']'
	| '(' BadPrefix ')'
;

BooleanPredicate : 
	OrPredicate
;

OrPredicate returns BooleanPredicate:
	AndPredicate ({OrPredicate.left = current} '|' right=AndPredicate)*
;

AndPredicate returns BooleanPredicate:
	BasicPredicate ({AndPredicate.left = current} '&' right=BasicPredicate)*
;

BasicPredicate returns BooleanPredicate:
	'(' BooleanPredicate ')'
	| {Atomic} label=[Label]	
	| {NotPredicate} '!' arg=BasicPredicate
	| {TruePredicate} 'true'
	| {FalsePredicate} 'false'
;

HmlFormulaDeclaration:
 'hml''formula' name = ID '=' formula = HmlFormula ';'
;
 
HmlFormula:
 HmlOrFormula 
;

HmlOrFormula returns HmlFormula:
 HmlAndFormula ({HmlOrFormula.left=current} '|' right=HmlAndFormula)*
;

HmlAndFormula returns HmlFormula:
 HmlBaseFormula ({HmlAndFormula.left=current} '&' right=HmlBaseFormula)*
;

HmlBaseFormula returns HmlFormula:
 HmlTrue | HmlFalse | '(' HmlFormula ')' | HmlNotFormula | HmlDiamondFormula | HmlBoxFormula 
 | HmlRecursionFormula | HmlRecursionVariable | HmlPredicate 
;

HmlPredicate:
 '#[' label=[Label] ']'
;

HmlTrue: {HmlTrue}
 'true'
;

HmlFalse: {HmlFalse}
 'false'
;

HmlNotFormula:
 '!' arg=HmlBaseFormula
;

HmlDiamondFormula:
 '<' action=LabelPredicate '>' arg=HmlBaseFormula
;

HmlBoxFormula:
 '[' action=LabelPredicate ']' arg=HmlBaseFormula
;

HmlRecursionFormula:
 HmlMinFixPoint | HmlMaxFixPoint
;

HmlMinFixPoint:
 'min' name=ID '.' arg=HmlBaseFormula
;

HmlMaxFixPoint:
 'max' name=ID '.' arg=HmlBaseFormula
;

HmlRecursionVariable:
 refeerence=[HmlRecursionFormula]
;

LtlFormulaDeclaration:
 'ltl''formula' name = ID '=' formula = LtlFormula ';'
;

LtlFormula:
 LtlOrFormula 
;

LtlOrFormula returns LtlFormula:
 LtlAndFormula ({LtlOrFormula.left=current} '|' right=LtlAndFormula)*
;

LtlAndFormula returns LtlFormula:
 LtlUntilFormula ({LtlAndFormula.left=current} '&' right=LtlUntilFormula)*
;

LtlUntilFormula returns LtlFormula:
 LtlBaseFormula ({LtlUntilFormula.left=current}'\\U' right=LtlBaseFormula)*
;

LtlBaseFormula returns LtlFormula:
 LtlTrue | LtlFalse | '(' LtlFormula ')' | LtlNotFormula | LtlNextFormula
  | LtlAlwaysFormula | LtlEventuallyFormula | LtlAtomicProposition
;

LtlAtomicProposition:
 prop=[Label] 
;

LtlNextFormula:
 '\\X' '{' arg=LtlBaseFormula '}'
;

LtlAlwaysFormula:
 '\\G' arg=LtlBaseFormula
;

LtlEventuallyFormula:
 '\\F' arg=LtlBaseFormula
;

LtlNotFormula:
 '!' arg=LtlBaseFormula
;

LtlTrue: {LtlTrue}
 'true'
;

LtlFalse: {LtlFalse}
 'false'
;

LabelPredicate:
 CupLabelPredicate
;

CupLabelPredicate returns LabelPredicate:
 CapLabelPredicate ( {CupLabelPredicate.left=current} '|' righ=CupLabelPredicate)?
;

CapLabelPredicate returns LabelPredicate:
 BaseLabelPredicate ( {CapLabelPredicate.left=current} '&' right=CapLabelPredicate)?
;

BaseLabelPredicate returns LabelPredicate:
 AnyLabelPredicate | ActionLabelPredicate | NotLabelPredicate
;

NotLabelPredicate:
 '!' arg=BaseLabelPredicate
;


ActionLabelPredicate:
 act=[Action]
;


AnyLabelPredicate: {AnyLabelPredicate}
 '*'
;
